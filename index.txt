const response = ({ A, B, C, D, E, F, G }) =>
  `Notas entregues: ${A || '0'} notas de R$200,00, ${
    B || '0'
  } notas de R$100,00, ${C || '0'} notas de R$50,00, ${
    D || '0'
  } notas de R$20,00, ${E || '0'} notas de R$10,00, ${
    F || '0'
  } notas de R$5,00 e ${G || '0'} notas de R$2,00`;

const invalid_schedule_digits = [1, 3];

const SCHDULES = [200, 100, 50, 20, 10, 5, 2];
const LETTERS = {
  0: 'A',
  1: 'B',
  2: 'C',
  3: 'D',
  4: 'E',
  5: 'F',
  6: 'G',
};

const get_schedules = value => {
  if (!Number.isInteger(value) || value < 1 || value > 1000) {
    return response({});
  }

  if (invalid_schedule_digits.includes(value)) {
    return response({});
  }

  const res = SCHDULES.reduce(
    (acc, schedule, index) => {
      if (index === 0) {
        let was_modified = false;

        const last_digit = String(value).split('').pop();
        was_modified = invalid_schedule_digits.includes(Number(last_digit));

        if (was_modified) {
          acc.value -= 5;
          acc.was_modified = was_modified;
        }
      }

      const mod = acc.value % schedule;

      if (acc.value >= schedule && !invalid_schedule_digits.includes(mod)) {
        const floor = Math.floor(acc.value / schedule);

        return {
          ...acc,
          [LETTERS[index]]: floor,
          value: mod,
        };
      }

      if (LETTERS[index] === 'F' && acc.was_modified) {
        acc.F = 1;
      }

      return acc;
    },
    { value, was_modified: false }
  );

  return response(res);
};

const log = (value, actual, expected) =>
  console.assert(
    actual === expected,
    `
  VALUE: ${value}
  Actual:
  ${actual}
  Expected:
  ${expected}
  ---------`
  );

console.log(50, get_schedules(50));
console.log(61, get_schedules(61));

//
//
//
//
//
//
//
//
//
//
//
//
//
//////////////////////////// Testes ///////////////////////////////////////
// Testes com entrada inválida
const invalid_values = [-1, 0, 1001, 34.2, '12', undefined, null, Infinity];

invalid_values.forEach(v => {
  const expected = response({});
  const actual = get_schedules(v);
  log(v, actual, expected);
});

// Testes com entrada válida mas sem combinação possível de notas
const invalid_schedules = [1, 3];

invalid_schedules.forEach(v => {
  const expected = response({});
  const actual = get_schedules(v);
  log(v, actual, expected);
});

// Testes com entrada válida e combinação possível de notas
log(2, get_schedules(2), response({ G: 1 }));
log(12, get_schedules(12), response({ E: 1, G: 1 }));
log(13, get_schedules(13), response({ F: 1, G: 4 }));
log(14, get_schedules(14), response({ E: 1, G: 2 }));
log(21, get_schedules(21), response({ E: 1, F: 1, G: 3 }));
log(23, get_schedules(23), response({ E: 1, F: 1, G: 4 }));
log(29, get_schedules(29), response({ D: 1, F: 1, G: 2 }));
log(50, get_schedules(50), response({ C: 1 }));
log(51, get_schedules(51), response({ D: 2, F: 1, G: 3 }));
log(52, get_schedules(52), response({ C: 1, G: 1 }));
log(53, get_schedules(53), response({ D: 2, F: 1, G: 4 }));
log(59, get_schedules(59), response({ C: 1, F: 1, G: 2 }));
log(60, get_schedules(60), response({ C: 1, E: 1 }));
log(61, get_schedules(61), response({ C: 1, F: 1, G: 3 }));
log(63, get_schedules(63), response({ C: 1, F: 1, G: 4 }));
log(70, get_schedules(70), response({ C: 1, D: 1 }));
log(71, get_schedules(71), response({ C: 1, E: 1, F: 1, G: 3 }));
log(72, get_schedules(72), response({ C: 1, D: 1, G: 1 }));
log(73, get_schedules(73), response({ C: 1, E: 1, F: 1, G: 4 }));
log(135, get_schedules(135), response({ B: 1, D: 1, E: 1, F: 1 }));
log(173, get_schedules(173), response({ B: 1, C: 1, E: 1, F: 1, G: 4 }));
log(273, get_schedules(273), response({ A: 1, C: 1, E: 1, F: 1, G: 4 }));
log(274, get_schedules(274), response({ A: 1, C: 1, D: 1, G: 2 }));
log(275, get_schedules(275), response({ A: 1, C: 1, D: 1, F: 1 }));
log(201, get_schedules(201), response({ B: 1, C: 1, D: 2, F: 1, G: 3 }));
log(366, get_schedules(366), response({ A: 1, B: 1, C: 1, E: 1, G: 3 }));
log(
  387,
  get_schedules(387),
  response({ A: 1, B: 1, C: 1, D: 1, E: 1, F: 1, G: 1 })
);
log(400, get_schedules(400), response({ A: 2 }));
log(437, get_schedules(437), response({ A: 2, D: 1, E: 1, F: 1, G: 1 }));
log(401, get_schedules(401), response({ A: 1, B: 1, C: 1, D: 2, F: 1, G: 3 }));
log(578, get_schedules(578), response({ A: 2, B: 1, C: 1, D: 1, G: 4 }));
log(556, get_schedules(556), response({ A: 2, B: 1, C: 1, G: 3 }));
log(557, get_schedules(557), response({ A: 2, B: 1, C: 1, F: 1, G: 1 }));
log(745, get_schedules(745), response({ A: 3, B: 1, D: 2, F: 1 }));
log(826, get_schedules(826), response({ A: 4, D: 1, G: 3 }));
log(893, get_schedules(893), response({ A: 4, C: 1, D: 1, E: 1, F: 1, G: 4 }));
log(998, get_schedules(998), response({ A: 4, B: 1, C: 1, D: 2, G: 4 }));
log(1000, get_schedules(1000), response({ A: 5 }));
